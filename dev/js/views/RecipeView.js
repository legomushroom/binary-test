// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/RecipeView', ['views/ProtoView', 'models/RecipeModel'], function(ProtoView, RecipeModel) {
    var RecipeView, _ref;

    RecipeView = (function(_super) {
      __extends(RecipeView, _super);

      function RecipeView() {
        _ref = RecipeView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      RecipeView.prototype.template = '#recipe-template';

      RecipeView.prototype.className = 'recipe-b cf';

      RecipeView.prototype.events = {
        'click .recipe-preview-e': 'toggleExpand',
        'click #js-remove': 'remove',
        'click #js-edit': 'edit',
        'click #js-cancel': 'cancel',
        'click #js-save': 'save',
        'keyup': 'keyup'
      };

      RecipeView.prototype.initialize = function() {
        RecipeView.__super__.initialize.apply(this, arguments);
        this.model.on('change', _.bind(this.render, this));
        return this;
      };

      RecipeView.prototype.render = function() {
        RecipeView.__super__.render.apply(this, arguments);
        this.bindAttributes();
        return this;
      };

      RecipeView.prototype.bindAttributes = function() {
        return this.$el.toggleClass('is-edit', !!this.model.get('isEditMode'));
      };

      RecipeView.prototype.toggleExpand = function() {
        return this.$el.toggleClass('is-expanded');
      };

      RecipeView.prototype.remove = function(e) {
        var _this = this;

        if (!e) {
          return;
        }
        e.stopPropagation();
        if (confirm("Are you sure whant to remove \"" + ($.trim(this.model.get('header'))) + "\" item?")) {
          this.$el.fadeOut(500, function() {
            return _this.model.destroy().then(function() {
              return _this.teardown();
            });
          });
        }
        return this;
      };

      RecipeView.prototype.edit = function(e) {
        this.model.toggleAttr('isEditMode');
        return false;
      };

      RecipeView.prototype.keyup = function(e) {
        this.isActive = true;
        if (!this.model.get('isEditMode')) {
          return false;
        }
        this.$('#js-save').toggleClass('is-inactive', false);
        return false;
      };

      RecipeView.prototype.getFromDom = function() {
        this.domData = {
          'text': this.$('#js-body').html(),
          'header': this.$('#js-header').html(),
          'description': this.$('#js-description').html(),
          'author': this.$('#js-author').html(),
          'ago': this.$('#js-ago').html(),
          'estimatedTime': this.$('#js-estimated').html()
        };
        return this.domData;
      };

      RecipeView.prototype.save = function(e) {
        var _this = this;

        if (!this.isActive) {
          return false;
        }
        this.isActive && this.model.set(this.getFromDom());
        if (!this.model.get('isNew')) {
          this.model.set('versions', this.model.get('versions') + 1);
        } else {
          this.model.set('isNew', false);
        }
        this.model.save().then(function(data) {
          return _this.model.id = data.id;
        });
        this.cancel();
        return false;
      };

      RecipeView.prototype.cancel = function(e) {
        if (this.model.get('isNew')) {
          this.model.destroy();
          this.teardown();
          return false;
        }
        this.model.set('isEditMode', false);
        App.$bodyHtml.animate({
          'scrollTop': this.$el.offset().top - 150
        });
        return false;
      };

      RecipeView.prototype.teardown = function() {
        RecipeView.__super__.teardown.apply(this, arguments);
        this.$el.remove();
        return this;
      };

      return RecipeView;

    })(ProtoView);
    return RecipeView;
  });

}).call(this);
